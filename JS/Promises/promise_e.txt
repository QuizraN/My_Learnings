1. Briefly explain different Promise states.

promise is an object that encapsulates the result of an asynchronous operation.
It can be any one of the 3 states:
1.Pending
It indicates that the asynchronous operation is in progress

2.Fulfilled with a value:
It indicates async operation is completed successfully

3.Rejected for a reason
It indicates that the asynchronous operation failed

Once a new Promise object is created, it's state is pending. If a promise reaches fulfilled or rejected state, it is resolved.



2. Using promise to create a delayedLowerCase function which will transform a string to lower case after 5 seconds. Ex Input: ""BEAUTIFUL CODE"" Output: ""beautiful code""
CODE:
function lowerCase(str)
{
	return new Promise((resolve,reject)=>{
		setTimeout(()=>{
			if(str!='')
			{resolve(str.toLowerCase())}
			else
			{reject('string is empty');}
		},5000);
	});
}
const promise=lowerCase('BEAUTIFUL CODE')
promise.then((str)=>console.log(str))
	.catch((str)=>console.log(str))




3. Briefly explain Promise Chaining. For the above created delayedLowerCase function chain a promise which will print the string and its length: Ex: Input: ""Beautiful Code""  Output: ""beautiful code - 14"""

Promise Chaining:
promise chaining helps to execute multiple asynchronous tasks in a sequence.

CODE:
function lowerCase(str)
{
	return new Promise((resolve,reject)=>{
		setTimeout(()=>{
			if(str!='')
			{resolve(str.toLowerCase())}
			else
			{reject('string is empty');}
		},5000);
	});
}
const promise=lowerCase('BEAUTIFUL CODE');
promise.then((str)=>{return str;}).then((str)=>console.log(str+"-"+str.length))
	.catch((str)=>console.log(str))



NOTE:
1.The callback approach works very well. However, it makes the code more difficult to follow. Also, it adds complexity to the functions with callback arguments.
2.a promise is an object that encapsulates the result of an asynchronous operation.
3.To get the value of a promise when itâ€™s fulfilled, you call the then() method of the promise object.
4.promise.then(onFulfilled,onRejected);
5.Internally, the catch() method invokes the then(undefined, onRejected) method.
6.Sometimes, you want to execute the same piece of code whether the promise is fulfilled or rejected
we keep the code in finally block
7.Promise.all() method to aggregate results from multiple asynchronous operations.
